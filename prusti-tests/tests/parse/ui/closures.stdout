// compile-flags: -Pprint_desugared_specs=true -Pprint_typeckd_specs=true -Pno_verify=true -Phide_uuids=true
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"
// normalize-stdout-test: "/[[a-z0-9]{4}/]::" -> "[$(CRATE_ID)]::"



#![feature(type_ascription)]
#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
/// Tests for closure macro parsing.
use prusti_contracts::*;
fn main() {
    let f1 =
        {
            #[allow(unused_variables)]
            #[prusti::closure]
            #[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
            #[prusti::post_spec_id_ref = "$(NUM_UUID)"]
            let _prusti_closure =
                |i: i32| -> i32
                    {

                        #[allow(unused_must_use)]
                        if false {
                            #[prusti::spec_only]
                            #[prusti::spec_id =
                              "$(NUM_UUID)"]
                            fn prusti_pre_closure_$(NUM_UUID)(i:
                                                                                       i32) {

                                #[allow(unused_must_use, unused_variables)]
                                {

                                    #[prusti::spec_only]
                                    #[prusti::spec_id =
                                      "$(NUM_UUID)"]
                                    || -> bool { (i >= 0) };
                                }
                            }
                        }
                        let result = { i + 1 };

                        #[allow(unused_must_use)]
                        if false {
                            #[prusti::spec_only]
                            #[prusti::spec_id =
                              "$(NUM_UUID)"]
                            fn prusti_post_closure_$(NUM_UUID)(i:
                                                                                        i32,
                                                                                    result:
                                                                                        i32) {

                                #[allow(unused_must_use, unused_variables)]
                                {

                                    #[prusti::spec_only]
                                    #[prusti::spec_id =
                                      "$(NUM_UUID)"]
                                    || -> bool { (result == i + 1) };
                                }
                            }
                        }
                        result
                    };
            _prusti_closure
        };
    let f2 =
        {
            #[allow(unused_variables)]
            #[prusti::closure]
            #[prusti::post_spec_id_ref = "$(NUM_UUID)"]
            let _prusti_closure =
                |i: i32| -> i32
                    {

                        #[allow(unused_must_use)]
                        if false { }
                        let result = { i + 1 };

                        #[allow(unused_must_use)]
                        if false {
                            #[prusti::spec_only]
                            #[prusti::spec_id =
                              "$(NUM_UUID)"]
                            fn prusti_post_closure_$(NUM_UUID)(i:
                                                                                        i32,
                                                                                    result:
                                                                                        i32) {

                                #[allow(unused_must_use, unused_variables)]
                                {

                                    #[prusti::spec_only]
                                    #[prusti::spec_id =
                                      "$(NUM_UUID)"]
                                    || -> bool { (result == i + 1) };
                                }
                            }
                        }
                        result
                    };
            _prusti_closure
        };
    let f3 =
        {
            #[allow(unused_variables)]
            #[prusti::closure]
            #[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
            let _prusti_closure =
                |i: i32| -> i32
                    {

                        #[allow(unused_must_use)]
                        if false {
                            #[prusti::spec_only]
                            #[prusti::spec_id =
                              "$(NUM_UUID)"]
                            fn prusti_pre_closure_$(NUM_UUID)(i:
                                                                                       i32) {

                                #[allow(unused_must_use, unused_variables)]
                                {

                                    #[prusti::spec_only]
                                    #[prusti::spec_id =
                                      "$(NUM_UUID)"]
                                    || -> bool { (i >= 0) };
                                }
                            }
                        }
                        let result = { i + 1 };

                        #[allow(unused_must_use)]
                        if false { }
                        result
                    };
            _prusti_closure
        };
    let f4 =
        {
            #[allow(unused_variables)]
            #[prusti::closure]
            let _prusti_closure =
                |i: i32| -> i32
                    {

                        #[allow(unused_must_use)]
                        if false { }
                        let result = { i + 1 };

                        #[allow(unused_must_use)]
                        if false { }
                        result
                    };
            _prusti_closure
        };
    let f5 =
        {
            #[allow(unused_variables)]
            #[prusti::closure]
            let _prusti_closure =
                || -> i32
                    {

                        #[allow(unused_must_use)]
                        if false { }
                        let result = { 1 };

                        #[allow(unused_must_use)]
                        if false { }
                        result
                    };
            _prusti_closure
        };
    let f6 =
        {
            #[allow(unused_variables)]
            #[prusti::closure]
            let _prusti_closure =
                |i: i32, j: i32| -> i32
                    {

                        #[allow(unused_must_use)]
                        if false { }
                        let result = { i + j };

                        #[allow(unused_must_use)]
                        if false { }
                        result
                    };
            _prusti_closure
        };
    let f7 =
        {
            #[allow(unused_variables)]
            #[prusti::closure]
            let _prusti_closure =
                |i: i32, j: i32, k: i32| -> i32
                    {

                        #[allow(unused_must_use)]
                        if false { }
                        let result = { i + j + k };

                        #[allow(unused_must_use)]
                        if false { }
                        result
                    };
            _prusti_closure
        };
}
Procedure(ProcedureSpecification { pres: [DefId(0:14 ~ closures[$(CRATE_ID)]::main::{closure#2}::prusti_pre_closure_$(NUM_UUID))], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [], posts: [DefId(0:11 ~ closures[$(CRATE_ID)]::main::{closure#1}::prusti_post_closure_$(NUM_UUID))], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [DefId(0:6 ~ closures[$(CRATE_ID)]::main::{closure#0}::prusti_pre_closure_$(NUM_UUID))], posts: [DefId(0:8 ~ closures[$(CRATE_ID)]::main::{closure#0}::prusti_post_closure_$(NUM_UUID))], pledges: [], predicate_body: None, pure: false, trusted: false })
