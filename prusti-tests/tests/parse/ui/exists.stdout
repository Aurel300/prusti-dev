// compile-flags: -Pprint_desugared_specs=true -Pprint_typeckd_specs=true -Pno_verify=true -Phide_uuids=true
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"
// normalize-stdout-test: "/[[a-z0-9]{4}/]::" -> "[$(CRATE_ID)]::"








#![feature(type_ascription)]
#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
use prusti_contracts::*;
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test3_$(NUM_UUID)() -> bool {
    ((exists((), |a: i32| -> bool { (((a + a == a + a)): bool) })): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test3() { }
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test4_$(NUM_UUID)() -> bool {
    ((exists((),
             |a: i32, b: i32| -> bool
                 { (((a + b == a + b && true) == (a + b == a + b)): bool) })):
         bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test4() { }
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test5_$(NUM_UUID)() -> bool {
    ((exists((),
             |a: i32, b: i32| -> bool
                 { ((implication(a + b == a + b, a + b == a + b)): bool) })):
         bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test5() { }
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test8_$(NUM_UUID)() -> bool {
    ((exists((|a: i32| { (1, 2 == 2 && true); }),
             |a: i32| -> bool { ((a + a == a + a): bool) })): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test8() { }
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test9_$(NUM_UUID)() -> bool {
    ((exists((|a: i32, b: i32| { (1, 2); }, |a: i32, b: i32| { (1,); }),
             |a: i32, b: i32| -> bool { ((a + b == a + b): bool) })): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test9() { }
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test10_$(NUM_UUID)() -> bool {
    ((exists((|a: i32, b: i32| { (1, 2, 3); }, |a: i32, b: i32| { (1, 2); },
              |a: i32, b: i32| { (1,); }),
             |a: i32, b: i32| -> bool
                 { ((implication(a + b == a + b, a + b == a + b)): bool) })):
         bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test10() { }
fn main() { }
Procedure(ProcedureSpecification { pres: [DefId(0:5 ~ exists[$(CRATE_ID)]::prusti_pre_item_test3_$(NUM_UUID))], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [DefId(0:8 ~ exists[$(CRATE_ID)]::prusti_pre_item_test4_$(NUM_UUID))], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [DefId(0:11 ~ exists[$(CRATE_ID)]::prusti_pre_item_test5_$(NUM_UUID))], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [DefId(0:14 ~ exists[$(CRATE_ID)]::prusti_pre_item_test8_$(NUM_UUID))], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [DefId(0:18 ~ exists[$(CRATE_ID)]::prusti_pre_item_test9_$(NUM_UUID))], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [DefId(0:23 ~ exists[$(CRATE_ID)]::prusti_pre_item_test10_$(NUM_UUID))], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
