// compile-flags: -Pprint_desugared_specs=true -Pprint_typeckd_specs=true -Pno_verify=true -Phide_uuids=true
// normalize-stdout-test: "[a-z0-9]{32}" -> "$(NUM_UUID)"
// normalize-stdout-test: "[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}" -> "$(UUID)"
// normalize-stdout-test: "/[[a-z0-9]{4}/]::" -> "[$(CRATE_ID)]::"







#![feature(type_ascription)]
#![feature(register_tool)]
#![register_tool(prusti)]
#[prelude_import]
use std::prelude::rust_2018::*;
#[macro_use]
extern crate std;
/// Tests for specification entailment parsing.
use prusti_contracts::*;
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test1_$(NUM_UUID)<F: Fn(i32)
                                                          -> i32>(f: F)
 -> bool {
    ((entailment(f, |i: i32| { i >= 5 },
                 |i: i32, cl_result: i32| { cl_result >= 6 })): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test1<F: Fn(i32) -> i32>(f: F) { }
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test2_$(NUM_UUID)<F: Fn(i32)
                                                          -> i32>(g: F)
 -> bool {
    ((entailment(g, |i: i32| { true }, |i: i32, cl_result: i32| { true })):
         bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test2<F: Fn(i32) -> i32>(g: F) { }
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test3_$(NUM_UUID)<F: Fn(i32)
                                                          -> i32>(f: F)
 -> bool {
    ((entailment(f, |i: i32| { true }, |i: i32, cl_result: i32| { true })):
         bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test3<F: Fn(i32) -> i32>(f: F) { }
#[allow(unused_must_use, unused_parens, unused_variables, dead_code)]
#[prusti::spec_only]
#[prusti::spec_id = "$(NUM_UUID)"]
fn prusti_pre_item_test4_$(NUM_UUID)<F: Fn(i32, i32)
                                                          -> i32>(f: F)
 -> bool {
    ((entailment(f, |i: i32, j: i32| { i + j == 0 },
                 |i: i32, j: i32, cl_result: i32| { true })): bool)
}
#[prusti::pre_spec_id_ref = "$(NUM_UUID)"]
fn test4<F: Fn(i32, i32) -> i32>(f: F) { }
fn main() { }
Procedure(ProcedureSpecification { pres: [DefId(0:5 ~ spec_entailment[$(CRATE_ID)]::prusti_pre_item_test1_$(NUM_UUID))], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [DefId(0:11 ~ spec_entailment[$(CRATE_ID)]::prusti_pre_item_test2_$(NUM_UUID))], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [DefId(0:17 ~ spec_entailment[$(CRATE_ID)]::prusti_pre_item_test3_$(NUM_UUID))], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
Procedure(ProcedureSpecification { pres: [DefId(0:23 ~ spec_entailment[$(CRATE_ID)]::prusti_pre_item_test4_$(NUM_UUID))], posts: [], pledges: [], predicate_body: None, pure: false, trusted: false })
